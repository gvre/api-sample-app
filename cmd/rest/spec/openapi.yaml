openapi: 3.0.0
info:
  title: REST API Sample Application
  version: "1.0"
servers:
  - url: http://localhost:18080/
    description: Development Server

paths:
  "/-/live":
    get:
      responses:
        "204":
          description: Check if the service is up

  "/-/health":
    get:
      responses:
        "200":
          description: Check if the service and its core dependencies are healthy
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Health"

  "/users":
    get:
      responses:
        "200":
          description: Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string

      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
              example: |
                {
                  "id": 3
                }

        "400":
          description: When the provided JSON data is invalid
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Failure"
              example: |
                {
                  "error": {
                    "message": "Request body contains badly-formed JSON"
                  }
                }

        "413":
          description: When request body is larger than the allowed one
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Failure"
              example: |
                {
                  "error": {
                    "message": "Request body is too large"
                  }
                }

  "/users/{id}":
    get:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer

      responses:
        "200":
          description: User
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/User"

        "400":
          description: When id is not a valid integer
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Failure"
              example: |
                {
                  "error": {
                    "message": "Invalid id"
                  }
                }

        "404":
          description: When user does not exist
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Failure"
              example: |
                {
                  "error": {
                    "message": "User does not exist"
                  }
                }

        "422":
          description: When id is less than 1
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/Failure"
              example: |
                {
                  "error": {
                    "message": "Validation error",
                    "errors": [
                      {
                        "field": "id",
                        "message": "Field cannot be less than 1"
                      }
                    ]
                  }
                }

components:
  schemas:
    Failure:
      type: object
      properties:
        error:
          type: object
          properties:
            message:
              type: string

    Health:
      type: object
      properties:
        datetime:
          type: string
          example: "2020-01-02T03:04:05Z"
        status:
          type: string
          example: ok
          enum:
            - ok
            - warning
            - error
        hostname:
          type: string
        checks:
          type: array
          items:
            $ref: "#/components/schemas/HealthCheck"

    HealthCheck:
      type: object
      properties:
        name:
          type: string
          example: internal_api
        status:
          type: string
          example: ok
          enum:
            - ok
            - warning
            - error
        core:
          type: boolean
          description: True if the checked service is a core dependency
        latency_ms:
          type: integer
          description: Latency in milliseconds (int64)
          example: 10
        data:
          type: object
          properties:
            message:
              type: string
              description: Error or warning message, empty on success.
            code:
              type: integer
              description: Remote HTTP call response code. Empty if the check is not HTTP related.
              example: 200
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: John Doe
