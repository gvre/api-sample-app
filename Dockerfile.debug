# Container for debugging.
# See https://blog.jetbrains.com/go/2020/05/06/debugging-a-go-application-inside-a-docker-container/ for details.

# builder
FROM golang:1.16-alpine AS builder

# Build Delve
RUN apk add git
RUN go get github.com/go-delve/delve/cmd/dlv

# Copy go.mod and go.sum separately from the rest of the code,
# so their cached layer is not invalidated when the code changes.
COPY go.mod go.sum /
RUN go mod download

COPY . /app
WORKDIR /app/cmd/rest
RUN CGO_ENABLED=0 GOARCH=amd64 GOOS=linux go build -trimpath -a -o /rest -gcflags='all=-N -l' .

# app
FROM alpine:latest

ENV PGHOST $PGHOST
ENV PGUSER $PGUSER
ENV PGPASSWORD $PGPASSWORD
ENV PGDATABASE $PGDATABASE

WORKDIR /
COPY --from=builder /rest .
COPY --from=builder /go/bin/dlv .

EXPOSE 8080 40000

CMD ["/dlv", "--listen=:40000", "--headless=true", "--api-version=2", "--accept-multiclient", "exec", "/rest"]
